<?xml version="1.0"?>
<ruleset
    name="mimmi20-cs"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="../../vendor/squizlabs/php_codesniffer/phpcs.xsd"
>
    <description>The coding standard.</description>

    <!-- Import PSR-12 coding standard (base) -->
    <rule ref="Doctrine">
        <exclude name="PSR12.Files.DeclareStatement"/>

        <!-- checked by SlevomatCodingStandard.Classes.ClassConstantVisibility -->
        <exclude name="PSR12.Properties.ConstantVisibility"/>

        <!-- can not be suppressed -->
        <exclude name="Generic.Files.LineLength.TooLong"/>

        <!-- Allow prefix and suffix "Abstract" for abstract classes -->
        <exclude name="SlevomatCodingStandard.Classes.SuperfluousAbstractClassNaming"/>

        <!-- Allow prefix and suffix "Exception" for exception classes -->
        <exclude name="SlevomatCodingStandard.Classes.SuperfluousExceptionNaming"/>

        <!-- Allow prefix and suffix "Interface" for interfaces -->
        <exclude name="SlevomatCodingStandard.Classes.SuperfluousInterfaceNaming"/>

        <!-- Allow suffix "Trait" for traits -->
        <exclude name="SlevomatCodingStandard.Classes.SuperfluousTraitNaming"/>

        <!-- Allow yoda conditions -->
        <exclude name="SlevomatCodingStandard.ControlStructures.DisallowYodaComparison"/>

        <!-- Forbid whitespace after `!` -->
        <exclude name="Generic.Formatting.SpaceAfterNot"/>
    </rule>

    <!-- Require use statements to be alphabetically sorted -->
    <rule ref="SlevomatCodingStandard.Classes.ModernClassNameReference.ClassNameReferencedViaFunctionCall">
        <properties>
            <property name="enableOnObjects" value="false"/>
        </properties>
    </rule>

    <!-- Disallows use of continue without integer operand in switch because it emits a warning in PHP 7.3 and higher -->
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowContinueWithoutIntegerOperandInSwitch"/>

    <!-- Require usage of yoda comparison -->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireYodaComparison"/>

    <!-- Reports empty functions body and requires at least a comment inside -->
    <rule ref="SlevomatCodingStandard.Functions.DisallowEmptyFunction"/>

    <!-- Requires arrow functions -->
    <rule ref="SlevomatCodingStandard.Functions.RequireArrowFunction"/>

    <!-- Some functions have $strict parameter. This sniff reports calls to these functions without the parameter or with $strict = false -->
    <rule ref="SlevomatCodingStandard.Functions.StrictCall"/>

    <!-- Looks for unused parameters -->
    <rule ref="SlevomatCodingStandard.Functions.UnusedParameter"/>

    <!-- Looks for useless parameter default value -->
    <rule ref="SlevomatCodingStandard.Functions.UselessParameterDefaultValue"/>

    <!-- Require use statements to be alphabetically sorted -->
    <rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses">
        <properties>
            <property name="psr12Compatible" value="true"/>
            <property name="caseSensitive" value="false"/>
        </properties>
    </rule>

    <!-- Requires only one namespace in a file -->
    <rule ref="SlevomatCodingStandard.Namespaces.RequireOneNamespaceInFile"/>

    <!-- Require presence of declare(strict_types=1) -->
    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
        <properties>
            <property
                name="newlinesCountBetweenOpenTagAndDeclare"
                value="2"
            />
            <property
                name="spacesCountAroundEqualsSign"
                value="1"
            />
            <property
                name="newlinesCountAfterDeclare"
                value="2"
            />
        </properties>
    </rule>

    <!-- Require types to be written as natively if possible;
        require iterable types to specify phpDoc with their content;
        forbid useless/duplicated information in phpDoc -->
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHint">
        <properties>
            <property name="traversableTypeHints" type="array">
                <element value="Traversable"/>
                <element value="Iterator"/>
                <element value="IteratorAggregate"/>
            </property>
            <property name="enableObjectTypeHint" value="true"/>
            <property name="enableMixedTypeHint" value="false"/>
            <property name="enableUnionTypeHint" value="false"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.TypeHints.PropertyTypeHint">
        <properties>
            <property name="traversableTypeHints" type="array">
                <element value="Traversable"/>
                <element value="Iterator"/>
                <element value="IteratorAggregate"/>
            </property>
            <property name="enableNativeTypeHint" value="true"/>
            <property name="enableMixedTypeHint" value="false"/>
            <property name="enableUnionTypeHint" value="false"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHint">
        <properties>
            <property name="traversableTypeHints" type="array">
                <element value="Traversable"/>
                <element value="Iterator"/>
                <element value="IteratorAggregate"/>
            </property>
            <property name="enableObjectTypeHint" value="true"/>
            <property name="enableStaticTypeHint" value="false"/>
            <property name="enableMixedTypeHint" value="false"/>
            <property name="enableUnionTypeHint" value="false"/>
        </properties>
    </rule>

    <!-- Force rules for function phpDoc -->
    <rule ref="Squiz.Commenting.FunctionComment">
        <!-- Allow `@throws` without description -->
        <exclude name="Squiz.Commenting.FunctionComment.EmptyThrows"/>

        <!-- Does not work properly with PHP 7 / short-named types -->
        <exclude name="Squiz.Commenting.FunctionComment.IncorrectParamVarName"/>

        <!-- Does not support collections, i.e. `string[]` -->
        <exclude name="Squiz.Commenting.FunctionComment.IncorrectTypeHint"/>

        <!-- Forces incorrect types -->
        <exclude name="Squiz.Commenting.FunctionComment.InvalidReturn"/>

        <!-- does not work with __clone() -->
        <exclude name="Squiz.Commenting.FunctionComment.InvalidNoReturn"/>

        <!-- Breaks with compound return types, i.e. `string|null` -->
        <exclude name="Squiz.Commenting.FunctionComment.InvalidReturnNotVoid"/>

        <!-- Breaks when all params are not documented -->
        <exclude name="Squiz.Commenting.FunctionComment.InvalidTypeHint"/>

        <!-- Do not require comments for `@param` -->
        <exclude name="Squiz.Commenting.FunctionComment.MissingParamComment"/>

        <!-- Comments don't have to be sentences -->
        <exclude name="Squiz.Commenting.FunctionComment.ParamCommentFullStop"/>

        <!-- Comments don't have to be sentences -->
        <exclude name="Squiz.Commenting.FunctionComment.ParamCommentNotCapital"/>

        <!-- Breaks when all params are not documented -->
        <exclude name="Squiz.Commenting.FunctionComment.ParamNameNoMatch"/>

        <!-- Doesn't respect inheritance -->
        <exclude name="Squiz.Commenting.FunctionComment.ScalarTypeHintMissing"/>

        <!-- `@throws` lines can often be read as a sentence,
            i.e. `@throws RuntimeException if the file could not be written.` -->
        <exclude name="Squiz.Commenting.FunctionComment.ThrowsNotCapital"/>

        <!-- `@throws` lines can often be read as a sentence, but shall not end with an Dot -->
        <exclude name="Squiz.Commenting.FunctionComment.ThrowsNoFullStop"/>

        <!-- Doesn't work with self as typehint -->
        <exclude name="Squiz.Commenting.FunctionComment.TypeHintMissing"/>
    </rule>

    <!-- Forbid useless comments -->
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenComments">
        <properties>
            <property name="forbiddenCommentPatterns" type="array">
                <element value="~^(?:(?!private|protected|static)\S+ )?(?:con|de)structor\.\z~i"/>
                <element value="~^Created by .+\.\z~i"/>
                <element value="~^(User|Date|Time): \S+\z~i"/>
                <element value="~^\S+ [gs]etter\.\z~i"/>
                <element value="~^(Class|Interface|Trait) \S+\z~i"/>
                <element value="~^Create an object~i"/>
                <element value="~^Construtor of the class~i"/>
                <element value="~^Construtor~i"/>
            </property>
        </properties>
    </rule>
</ruleset>
