<?xml version="1.0"?>
<ruleset
    name="Mimmi20CodingStandard"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="../../vendor/squizlabs/php_codesniffer/phpcs.xsd"
>
    <description>The coding standard.</description>

    <arg name="tab-width" value="4"/>

    <!-- Import PSR-12 coding standard (base) -->
    <rule ref="PSR12">
        <!-- can not be suppressed -->
        <exclude name="Generic.Files.LineLength.TooLong"/>

        <!-- added later -->
        <exclude name="Generic.WhiteSpace.ScopeIndent"/>

        <!-- checked by SlevomatCodingStandard.Namespaces.UseSpacing -->
        <exclude name="PSR2.Namespaces.UseDeclaration.SpaceAfterLastUse"/>

        <!-- checked by SlevomatCodingStandard.TypeHints.DeclareStrictTypes -->
        <exclude name="PSR12.Files.DeclareStatement"/>

        <exclude name="PSR12.Files.FileHeader"/>

        <!-- checked by SlevomatCodingStandard.Namespaces.NamespaceSpacing -->
        <exclude name="PSR2.Namespaces.NamespaceDeclaration.BlankLineAfter"/>

        <!-- checked by SlevomatCodingStandard.Operators.SpreadOperatorSpacing -->
        <exclude name="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingAfterVariadic"/>

        <!-- checked by SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing -->
        <exclude name="PSR12.Functions.ReturnTypeDeclaration"/>

        <!-- checked by SlevomatCodingStandard.Classes.TraitUseSpacing -->
        <exclude name="PSR12.Traits.UseDeclaration"/>

        <!-- checked by SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing.WhitespaceAfterNullabilitySymbol -->
        <exclude name="PSR12.Functions.NullableTypeDeclaration.WhitespaceFound"/>

        <!-- checked by PSR12.ControlStructures.ControlStructureSpacing -->
        <exclude name="PSR2.ControlStructures.ControlStructureSpacing.SpacingAfterOpenBrace"/>
    </rule>

    <!-- Force array element indentation with 4 spaces -->
    <rule ref="Generic.Arrays.ArrayIndent"/>

    <!-- Forbid `array(...)` -->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>

    <!-- Forbid duplicate classes -->
    <rule ref="Generic.Classes.DuplicateClassName"/>

    <!-- Forbid empty statements -->
    <rule ref="Generic.CodeAnalysis.EmptyStatement">
        <!-- But allow empty catch -->
        <exclude name="Generic.CodeAnalysis.EmptyStatement.DetectedCatch"/>
    </rule>

    <!-- Forbid final methods in final classes -->
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>

    <!-- Forbid useless empty method overrides -->
    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/>

    <!-- Forbid inline HTML in PHP code -->
    <rule ref="Generic.Files.InlineHTML"/>

    <!-- Align corresponding assignment statement tokens -->
    <rule ref="Generic.Formatting.MultipleStatementAlignment">
        <type>error</type>
    </rule>

    <!-- Force whitespace after a type cast -->
    <rule ref="Generic.Formatting.SpaceAfterCast">
        <properties>
            <property name="spacing" value="1"/>
        </properties>
    </rule>

    <rule ref="Generic.Metrics.CyclomaticComplexity">
        <properties>
            <property name="complexity" value="15" />
            <property name="absoluteComplexity" value="30" />
        </properties>
        <type>warning</type>
    </rule>

    <rule ref="Generic.Metrics.NestingLevel">
        <properties>
            <property name="nestingLevel" value="8" />
            <property name="absoluteNestingLevel" value="12" />
        </properties>
        <type>warning</type>
    </rule>

    <!-- Forbid PHP 4 constructors -->
    <rule ref="Generic.NamingConventions.ConstructorName"/>

    <!-- Forbid any content before opening tag -->
    <rule ref="Generic.PHP.CharacterBeforePHPOpeningTag"/>

    <!-- Forbid deprecated functions -->
    <rule ref="Generic.PHP.DeprecatedFunctions"/>

    <!-- Forbid alias functions, i.e. `sizeof()`, `delete()` -->
    <rule ref="Generic.PHP.ForbiddenFunctions">
        <properties>
            <property name="forbiddenFunctions" type="array">
                <element key="chop" value="rtrim"/>
                <element key="close" value="closedir"/>
                <element key="compact" value="null"/>
                <element key="delete" value="unset"/>
                <element key="doubleval" value="floatval"/>
                <element key="extract" value="null"/>
                <element key="fputs" value="fwrite"/>
                <element key="ini_alter" value="ini_set"/>
                <element key="is_double" value="is_float"/>
                <element key="is_integer" value="is_int"/>
                <element key="is_long" value="is_int"/>
                <element key="is_null" value="null"/>
                <element key="is_real" value="is_float"/>
                <element key="is_writeable" value="is_writable"/>
                <element key="join" value="implode"/>
                <element key="key_exists" value="array_key_exists"/>
                <element key="pos" value="current"/>
                <element key="settype" value="null"/>
                <element key="show_source" value="highlight_file"/>
                <element key="sizeof" value="count"/>
                <element key="strchr" value="strstr"/>
                <element key="user_error" value="trigger_error"/>
            </property>
        </properties>
    </rule>

    <!-- Forbid useless inline string concatenation -->
    <rule ref="Generic.Strings.UnnecessaryStringConcat">
        <!-- But multiline is useful for readability -->
        <properties>
            <property name="allowMultiline" value="true"/>
        </properties>
    </rule>

    <!-- Forbid backtick operator -->
    <rule ref="Generic.PHP.BacktickOperator"/>

    <!-- Force PHP 7 param and return types to be lowercased -->
    <rule ref="Generic.PHP.LowerCaseType"/>

    <!-- Forbid `php_sapi_name()` function -->
    <rule ref="Generic.PHP.SAPIUsage"/>

    <!-- Require there be no space between increment/decrement operator and its operand -->
    <rule ref="Generic.WhiteSpace.IncrementDecrementSpacing"/>

    <!-- Require space after language constructs -->
    <rule ref="Generic.WhiteSpace.LanguageConstructSpacing"/>

    <!-- Code MUST use an indent of 4 spaces for each indent level, and MUST NOT use tabs for indenting. -->
    <rule ref="Generic.WhiteSpace.ScopeIndent">
        <properties>
            <property name="ignoreIndentationTokens" type="array">
                <element value="T_COMMENT"/>
                <element value="T_DOC_COMMENT_OPEN_TAG"/>
            </property>
            <property name="indent" value="4" />
            <property name="exact" value="true" />
            <property name="tabIndent" value="false" />
        </properties>
    </rule>

    <!-- Forbid comments starting with # -->
    <rule ref="PEAR.Commenting.InlineComment"/>

    <!-- Disallow else if in favor of elseif -->
    <rule ref="PSR2.ControlStructures.ElseIfDeclaration.NotAllowed">
        <type>error</type>
    </rule>

    <!-- Disallows implicit array creation -->
    <rule ref="SlevomatCodingStandard.Arrays.DisallowImplicitArrayCreation"/>

    <!-- Enforces reasonable end bracket placement for multi-line arrays -->
    <rule ref="SlevomatCodingStandard.Arrays.MultiLineArrayEndBracketPlacement"/>

    <!-- Require that single line arrays have the correct spacing: no space around brackets and one space after comma -->
    <rule ref="SlevomatCodingStandard.Arrays.SingleLineArrayWhitespace">
        <properties>
            <property name="spacesAroundBrackets" value="0" />
            <property name="enableEmptyArrayCheck" value="true" />
        </properties>
    </rule>

    <!-- Require comma after last element in multi-line array -->
    <rule ref="SlevomatCodingStandard.Arrays.TrailingArrayComma"/>

    <!-- Attributes should be adjoined to the PHP element they belong to -->
    <rule ref="SlevomatCodingStandard.Attributes.AttributeAndTargetSpacing">
        <properties>
            <property name="allowOnSameLine" value="false" />
            <property name="linesCount" value="0" />
        </properties>
    </rule>

    <!-- Disallow multiple attributes inside one #[] -->
    <rule ref="SlevomatCodingStandard.Attributes.DisallowAttributesJoining"/>

    <!-- Require only one attribute per line -->
    <rule ref="SlevomatCodingStandard.Attributes.DisallowMultipleAttributesPerLine"/>

    <!-- Require PHPDoc always before attributes -->
    <rule ref="SlevomatCodingStandard.Attributes.RequireAttributeAfterDocComment"/>

    <!-- Require no space before : and 1 space before Enum type -->
    <rule ref="SlevomatCodingStandard.Classes.BackedEnumTypeSpacing">
        <properties>
            <property name="spacesCountBeforeColon" value="0"/>
            <property name="spacesCountBeforeType" value="1"/>
        </properties>
    </rule>

    <!-- Disallows long classes -->
    <rule ref="SlevomatCodingStandard.Classes.ClassLength">
        <properties>
            <property name="includeComments" value="false"/>
            <property name="includeWhitespace" value="false"/>
            <property name="maxLinesLength" value="1000"/>
        </properties>
        <type>warning</type>
    </rule>

    <!-- Require presence of constant visibility -->
    <rule ref="SlevomatCodingStandard.Classes.ClassConstantVisibility">
        <properties>
            <property name="fixable" value="true"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.Classes.ClassMemberSpacing">
        <properties>
            <property name="linesCountBetweenMembers" value="1"/>
        </properties>
    </rule>

    <!-- Enforce consistent constant spacing -->
    <rule ref="SlevomatCodingStandard.Classes.ConstantSpacing">
        <properties>
            <property name="minLinesCountBeforeWithComment" value="1"/>
            <property name="maxLinesCountBeforeWithComment" value="1"/>
            <property name="minLinesCountBeforeWithoutComment" value="1"/>
            <property name="maxLinesCountBeforeWithoutComment" value="1"/>
        </properties>
    </rule>

    <!-- Forbid LSB for constants (static::FOO) -->
    <rule ref="SlevomatCodingStandard.Classes.DisallowLateStaticBindingForConstants"/>

    <!-- Forbid more than one constant declared per statement -->
    <rule ref="SlevomatCodingStandard.Classes.DisallowMultiConstantDefinition"/>

    <!-- Forbid more than one property declared per statement -->
    <rule ref="SlevomatCodingStandard.Classes.DisallowMultiPropertyDefinition"/>

    <!-- Forbid $object->{'foo'} when the property name is compatible with identifier access -->
    <rule ref="SlevomatCodingStandard.Classes.DisallowStringExpressionPropertyFetch"/>

    <!-- Forbid empty lines around type declarations -->
    <rule ref="SlevomatCodingStandard.Classes.EmptyLinesAroundClassBraces">
        <properties>
            <property name="linesCountAfterOpeningBrace" value="0"/>
            <property name="linesCountBeforeClosingBrace" value="0"/>
        </properties>
    </rule>

    <!-- Enforce consistent enum spacing -->
    <rule ref="SlevomatCodingStandard.Classes.EnumCaseSpacing">
        <properties>
            <property name="minLinesCountBeforeWithComment" value="1"/>
            <property name="maxLinesCountBeforeWithComment" value="1"/>
            <property name="minLinesCountBeforeWithoutComment" value="1"/>
            <property name="maxLinesCountBeforeWithoutComment" value="1"/>
        </properties>
    </rule>

    <!-- Disallows using public properties -->
    <rule ref="SlevomatCodingStandard.Classes.ForbiddenPublicProperty">
        <properties>
            <property name="checkPromoted" value="true"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.Classes.MethodSpacing">
        <properties>
            <property name="minLinesCount" value="1"/>
            <property name="maxLinesCount" value="1"/>
        </properties>
    </rule>

    <!-- Require usage of ::class instead of __CLASS__, get_class(), get_class($this), get_called_class() and get_parent_class() -->
    <rule ref="SlevomatCodingStandard.Classes.ModernClassNameReference">
        <properties>
            <property name="enableOnObjects" value="true"/>
        </properties>
    </rule>

    <!-- Add one line around parent call in order to improve readability -->
    <rule ref="SlevomatCodingStandard.Classes.ParentCallSpacing">
        <properties>
            <property name="linesCountBefore" value="1"/>
            <property name="linesCountBeforeFirst" value="0"/>
            <property name="linesCountAfter" value="1"/>
            <property name="linesCountAfterLast" value="0"/>
        </properties>
    </rule>

    <!-- https://github.com/slevomat/coding-standard#slevomatcodingstandardclassespropertydeclaration- -->
    <rule ref="SlevomatCodingStandard.Classes.PropertyDeclaration">
        <properties>
            <property name="checkPromoted" value="true"/>
            <property name="enableMultipleSpacesBetweenModifiersCheck" value="true"/>
        </properties>
    </rule>

    <!-- Ensure that there are consistent blank lines between properties. -->
    <rule ref="SlevomatCodingStandard.Classes.PropertySpacing">
        <properties>
            <property name="minLinesCountBeforeWithComment" value="0"/>
            <property name="maxLinesCountBeforeWithComment" value="1"/>
            <property name="minLinesCountBeforeWithoutComment" value="0"/>
            <property name="maxLinesCountBeforeWithoutComment" value="0"/>
        </properties>
    </rule>

    <!-- Requires the class to be declared either as abstract or as final. -->
    <rule ref="SlevomatCodingStandard.Classes.RequireAbstractOrFinal"/>

    <!-- Require usage of constructor property promotion -->
    <rule ref="SlevomatCodingStandard.Classes.RequireConstructorPropertyPromotion">
        <properties>
            <property name="enable" value="true"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.Classes.RequireMultiLineMethodSignature">
        <properties>
            <property name="minLineLength" value="120"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.Classes.RequireSelfReference"/>

    <rule ref="SlevomatCodingStandard.Classes.RequireSingleLineMethodSignature">
        <properties>
            <property name="maxLineLength" value="119"/>
        </properties>
    </rule>

    <!-- Forbid uses of multiple traits separated by comma -->
    <rule ref="SlevomatCodingStandard.Classes.TraitUseDeclaration"/>

    <!-- Require no spaces before trait use, between trait uses and one space after trait uses -->
    <rule ref="SlevomatCodingStandard.Classes.TraitUseSpacing">
        <properties>
            <property name="linesCountAfterLastUse" value="1"/>
            <property name="linesCountAfterLastUseWhenLastInClass" value="0"/>
            <property name="linesCountBeforeFirstUse" value="0"/>
            <property name="linesCountBetweenUses" value="0"/>
        </properties>
    </rule>

    <!-- Reports useless late static binding -->
    <rule ref="SlevomatCodingStandard.Classes.UselessLateStaticBinding"/>

    <!-- Forbid invalid annotation names in standard PHPDoc tags -->
    <rule ref="SlevomatCodingStandard.Commenting.AnnotationName"/>

    <!-- Reports @deprecated annotations without description. -->
    <rule ref="SlevomatCodingStandard.Commenting.DeprecatedAnnotationDeclaration"/>

    <!-- disallows comments after code at the same line -->
    <rule ref="SlevomatCodingStandard.Commenting.DisallowCommentAfterCode"/>

    <!-- Require specific order of phpDoc annotations with empty newline between specific groups -->
    <rule ref="SlevomatCodingStandard.Commenting.DocCommentSpacing">
        <properties>
            <property name="linesCountBeforeFirstContent" value="0"/>
            <property name="linesCountAfterLastContent" value="0"/>
            <property name="linesCountBetweenDescriptionAndAnnotations" value="1"/>
            <property name="linesCountBetweenAnnotationsGroups" value="1"/>
            <property name="annotationsGroups" type="array">
                <element value="
                    @internal,
                    @deprecated,
                "/>
                <element value="
                    @link,
                    @see,
                    @uses,
                "/>
                <element value="
                    @ORM\,
                    @ODM\,
                    @PHPCR\,
                "/>
                <element value="
                    @param,
                    @psalm-param,
                    @phpstan-param,
                "/>
                <element value="
                    @return,
                    @psalm-return,
                    @phpstan-return,
                "/>
                <element value="@throws"/>
            </property>
        </properties>
    </rule>

    <!-- Forbid useless annotations - Git and LICENCE file provide more accurate information -->
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenAnnotations">
        <properties>
            <property name="forbiddenAnnotations" type="array">
                <element value="@author"/>
                <element value="@category"/>
                <element value="@copyright"/>
                <element value="@created"/>
                <element value="@license"/>
                <element value="@package"/>
                <element value="@since"/>
                <element value="@subpackage"/>
                <element value="@version"/>
            </property>
        </properties>
    </rule>

    <!-- Forbid empty comments -->
    <rule ref="SlevomatCodingStandard.Commenting.EmptyComment"/>

    <!-- Forbid useless comments -->
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenComments">
        <properties>
            <property name="forbiddenCommentPatterns" type="array">
                <element value="~^(?:(?!private|protected|static)\S+ )?(?:con|de)structor\.\z~i"/>
                <element value="~^Created by .+\.\z~i"/>
                <element value="~^(User|Date|Time): \S+\z~i"/>
                <element value="~^\S+ [gs]etter\.\z~i"/>
                <element value="~^(Class|Interface|Trait) \S+\z~i"/>
                <element value="~^Create an object~i"/>
                <element value="~^Construtor of the class~i"/>
                <element value="~^Construtor~i"/>
            </property>
        </properties>
    </rule>

    <!-- Report invalid format of inline phpDocs with @var -->
    <rule ref="SlevomatCodingStandard.Commenting.InlineDocCommentDeclaration"/>

    <!-- Require One Line Doc Comment where there's only 1 annotation present -->
    <rule ref="SlevomatCodingStandard.Commenting.RequireOneLineDocComment"/>

    <!-- Forbid useless phpDocs for functions -->
    <rule ref="SlevomatCodingStandard.Commenting.UselessFunctionDocComment">
        <properties>
            <property name="traversableTypeHints" type="array">
                <element value="Traversable"/>
                <element value="Iterator"/>
                <element value="IteratorAggregate"/>
                <element value="Doctrine\Common\Collections\Collection"/>
            </property>
        </properties>
    </rule>

    <!-- Forbid useless inherit doc comment -->
    <rule ref="SlevomatCodingStandard.Commenting.UselessInheritDocComment"/>

    <rule ref="SlevomatCodingStandard.Complexity.Cognitive">
        <properties>
            <property name="warningThreshold" value="15"/>
            <property name="errorThreshold" value="30"/>
        </properties>
        <type>warning</type>
    </rule>

    <!-- Forbid assignments in conditions -->
    <rule ref="SlevomatCodingStandard.ControlStructures.AssignmentInCondition"/>

    <!-- Require consistent spacing for block structures -->
    <rule ref="SlevomatCodingStandard.ControlStructures.BlockControlStructureSpacing">
        <properties>
            <property name="linesCountBefore" value="1"/>
            <property name="linesCountBeforeFirst" value="0"/>
            <property name="linesCountAfter" value="1"/>
            <property name="linesCountAfterLast" value="0"/>
            <property name="controlStructures" type="array">
                <element value="if"/>
                <element value="do"/>
                <element value="while"/>
                <element value="for"/>
                <element value="foreach"/>
                <element value="switch"/>
                <element value="try"/>
            </property>
        </properties>
    </rule>

    <!-- Forbid fancy yoda conditions -->
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowYodaComparison"/>

    <!-- Disallows use of continue without integer operand in switch because it emits a warning in PHP 7.3 and higher -->
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowContinueWithoutIntegerOperandInSwitch"/>

    <!-- Require usage of early exit -->
    <rule ref="SlevomatCodingStandard.ControlStructures.EarlyExit">
        <properties>
            <property name="ignoreStandaloneIfInScope" value="true"/>
            <property name="ignoreOneLineTrailingIf" value="true"/>
            <property name="ignoreTrailingIfWithOneInstruction" value="true"/>
        </properties>
    </rule>

    <!-- Require consistent spacing for jump statements -->
    <rule ref="SlevomatCodingStandard.ControlStructures.JumpStatementsSpacing">
        <properties>
            <property name="allowSingleLineYieldStacking" value="true"/>
            <property name="linesCountBeforeWhenFirstInCaseOrDefault" value="0"/>
            <property name="linesCountAfterWhenLastInCaseOrDefault" value="0"/>
            <property name="linesCountAfterWhenLastInLastCaseOrDefault" value="0"/>
            <property name="jumpStatements" type="array">
                <element value="break"/>
                <element value="continue"/>
                <element value="goto"/>
                <element value="return"/>
                <element value="throw"/>
                <element value="yield"/>
                <element value="yield_from"/>
            </property>
        </properties>
    </rule>

    <!-- Require language constructs without parentheses -->
    <rule ref="SlevomatCodingStandard.ControlStructures.LanguageConstructWithParentheses"/>

    <!-- Requires new with parentheses -->
    <rule ref="SlevomatCodingStandard.ControlStructures.NewWithParentheses"/>

    <rule ref="SlevomatCodingStandard.ControlStructures.RequireMultiLineCondition">
        <properties>
            <property name="minLineLength" value="105"/>
            <property name="booleanOperatorOnPreviousLine" value="false"/>
            <property name="alwaysSplitAllConditionParts" value="false"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.ControlStructures.RequireMultiLineTernaryOperator">
        <properties>
            <property name="lineLengthLimit" value="105"/>
            <property name="minExpressionsLength" value=""/>
        </properties>
    </rule>

    <!-- Require usage of null coalesce operator equal operator when possible -->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceEqualOperator">
        <properties>
            <property name="enable" value="true"/>
        </properties>
    </rule>

    <!-- Require usage of null coalesce operator when possible -->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceOperator"/>

    <!-- Require usage of null safe operator when possible -->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullSafeObjectOperator">
        <properties>
            <property name="enable" value="true"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.ControlStructures.RequireShortTernaryOperator"/>

    <rule ref="SlevomatCodingStandard.ControlStructures.RequireSingleLineCondition">
        <properties>
            <property name="maxLineLength" value="104"/>
            <property name="alwaysForSimpleConditions" value="false"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.ControlStructures.RequireTernaryOperator"/>

    <!-- Forbid usage of conditions when a simple return can be used -->
    <rule ref="SlevomatCodingStandard.ControlStructures.UselessIfConditionWithReturn"/>

    <!-- Forbid usage of boolean-only ternary operator usage (e.g. $foo ? true : false) -->
    <rule ref="SlevomatCodingStandard.ControlStructures.UselessTernaryOperator"/>

    <!-- Forbid useless unreachable catch blocks -->
    <rule ref="SlevomatCodingStandard.Exceptions.DeadCatch"/>

    <!-- Require using Throwable instead of Exception -->
    <rule ref="SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly"/>

    <!-- Require non-capturing catch when the variable with exception is not used. -->
    <rule ref="SlevomatCodingStandard.Exceptions.RequireNonCapturingCatch"/>

    <!-- Ensure Arrow Functions declaration format -->
    <rule ref="SlevomatCodingStandard.Functions.ArrowFunctionDeclaration">
        <properties>
            <property name="spacesCountAfterKeyword" value="1"/>
            <property name="spacesCountBeforeArrow" value="1"/>
            <property name="spacesCountAfterArrow" value="1"/>
        </properties>
    </rule>

    <!-- Reports empty functions body and requires at least a comment inside -->
    <rule ref="SlevomatCodingStandard.Functions.DisallowEmptyFunction"/>

    <!-- Disallow trailing commas in single line function calls -->
    <rule ref="SlevomatCodingStandard.Functions.DisallowTrailingCommaInCall">
        <properties>
            <property name="onlySingleLine" value="true"/>
        </properties>
    </rule>

    <!-- Disallow trailing commas in single line closure use -->
    <rule ref="SlevomatCodingStandard.Functions.DisallowTrailingCommaInClosureUse">
        <properties>
            <property name="onlySingleLine" value="true"/>
        </properties>
    </rule>

    <!-- Disallow trailing commas in single line function declarations -->
    <rule ref="SlevomatCodingStandard.Functions.DisallowTrailingCommaInDeclaration">
        <properties>
            <property name="onlySingleLine" value="true"/>
        </properties>
    </rule>

    <!-- Disallows long functions -->
    <rule ref="SlevomatCodingStandard.Functions.FunctionLength">
        <properties>
            <property name="includeComments" value="false"/>
            <property name="includeWhitespace" value="false"/>
            <property name="maxLinesLength" value="100"/>
        </properties>
        <type>warning</type>
    </rule>

    <!-- Requires arrow functions -->
    <rule ref="SlevomatCodingStandard.Functions.RequireArrowFunction"/>

    <!-- Enforces function call to be split to more lines so each parameter is on its own line -->
    <rule ref="SlevomatCodingStandard.Functions.RequireMultiLineCall">
        <properties>
            <property name="minLineLength" value="105"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.Functions.RequireSingleLineCall">
        <properties>
            <property name="maxLineLength" value="104"/>
            <property name="ignoreWithComplexParameter" value="true"/>
        </properties>
    </rule>

    <!-- Require trailing commas in multiline function calls -->
    <rule ref="SlevomatCodingStandard.Functions.RequireTrailingCommaInCall"/>

    <!-- Require trailing commas in multiline closure use -->
    <rule ref="SlevomatCodingStandard.Functions.RequireTrailingCommaInClosureUse"/>

    <!-- Require trailing commas in multiline function declarations -->
    <rule ref="SlevomatCodingStandard.Functions.RequireTrailingCommaInDeclaration"/>

    <!-- Require closures not referencing $this be static -->
    <rule ref="SlevomatCodingStandard.Functions.StaticClosure"/>

    <!-- Some functions have $strict parameter. This sniff reports calls to these functions without the parameter or with $strict = false -->
    <rule ref="SlevomatCodingStandard.Functions.StrictCall"/>

    <!-- Forbid unused variables passed to closures via `use` -->
    <rule ref="SlevomatCodingStandard.Functions.UnusedInheritedVariablePassedToClosure"/>

    <!-- Looks for unused parameters -->
    <rule ref="SlevomatCodingStandard.Functions.UnusedParameter"/>

    <!-- Looks for useless parameter default value -->
    <rule ref="SlevomatCodingStandard.Functions.UselessParameterDefaultValue"/>

    <!-- Require use statements to be alphabetically sorted -->
    <rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses">
        <properties>
            <property name="psr12Compatible" value="true"/>
            <property name="caseSensitive" value="false"/>
        </properties>
    </rule>

    <!-- Forbid fancy group uses -->
    <rule ref="SlevomatCodingStandard.Namespaces.DisallowGroupUse"/>

    <!-- Forbid multiple use statements on same line -->
    <rule ref="SlevomatCodingStandard.Namespaces.MultipleUsesPerLine"/>

    <!-- Enforces one space after namespace, disallows content between namespace name and semicolon and disallows use of bracketed syntax -->
    <rule ref="SlevomatCodingStandard.Namespaces.NamespaceDeclaration"/>

    <!-- Require newlines around namespace declaration -->
    <rule ref="SlevomatCodingStandard.Namespaces.NamespaceSpacing"/>

    <!-- Forbid using absolute class name references (except global ones) -->
    <rule ref="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly">
        <properties>
            <property name="allowFallbackGlobalConstants" value="false"/>
            <property name="allowFallbackGlobalFunctions" value="false"/>
            <property name="allowFullyQualifiedGlobalClasses" value="false"/>
            <property name="allowFullyQualifiedGlobalConstants" value="false"/>
            <property name="allowFullyQualifiedGlobalFunctions" value="false"/>
            <property name="allowFullyQualifiedNameForCollidingClasses" value="true"/>
            <property name="allowFullyQualifiedNameForCollidingConstants" value="true"/>
            <property name="allowFullyQualifiedNameForCollidingFunctions" value="true"/>
            <property name="searchAnnotations" value="true"/>
        </properties>
    </rule>

    <!-- Requires only one namespace in a file -->
    <rule ref="SlevomatCodingStandard.Namespaces.RequireOneNamespaceInFile"/>

    <!-- Forbid unused use statements -->
    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses">
        <properties>
            <property name="searchAnnotations" value="true"/>
        </properties>
    </rule>

    <!-- Forbid superfluous leading backslash in use statements -->
    <rule ref="SlevomatCodingStandard.Namespaces.UseDoesNotStartWithBackslash"/>

    <!-- Forbid useless uses of the same namespace -->
    <rule ref="SlevomatCodingStandard.Namespaces.UseFromSameNamespace"/>

    <!-- Require empty newlines before and after uses -->
    <rule ref="SlevomatCodingStandard.Namespaces.UseSpacing">
        <properties>
            <property name="linesCountAfterLastUse" value="1"/>
            <property name="linesCountBeforeFirstUse" value="1"/>
            <property name="linesCountBetweenUseTypes" value="1"/>
        </properties>
    </rule>

    <!-- Forbid useless alias for classes, constants and functions -->
    <rule ref="SlevomatCodingStandard.Namespaces.UselessAlias"/>

    <!-- Disallows numeric literal separators -->
    <rule ref="SlevomatCodingStandard.Numbers.DisallowNumericLiteralSeparator"/>

    <!-- Forbid weak comparisons -->
    <rule ref="SlevomatCodingStandard.Operators.DisallowEqualOperators"/>

    <!-- Forbid spacing before the negative operator `-` -->
    <rule ref="SlevomatCodingStandard.Operators.NegationOperatorSpacing">
        <properties>
            <property name="spacesCount" value="0"/>
        </properties>
    </rule>

    <!-- Require the usage of assignment operators, eg `+=`, `.=` when possible -->
    <rule ref="SlevomatCodingStandard.Operators.RequireCombinedAssignmentOperator"/>

    <!-- Require no spacing after spread operator -->
    <rule ref="SlevomatCodingStandard.Operators.SpreadOperatorSpacing">
        <properties>
            <property name="spacesCountAfterOperator" value="0"/>
        </properties>
    </rule>

    <!-- Disallows direct call of __invoke() -->
    <rule ref="SlevomatCodingStandard.PHP.DisallowDirectMagicInvokeCall"/>

    <!-- Enforces configurable number of spaces after reference -->
    <rule ref="SlevomatCodingStandard.PHP.ReferenceSpacing">
        <properties>
            <property name="spacesCountAfterReference" value="0"/>
        </properties>
    </rule>

    <!-- Require /* @var type $foo */ and similar simple inline annotations to be replaced by assert() -->
    <rule ref="SlevomatCodingStandard.PHP.RequireExplicitAssertion">
        <properties>
            <property name="enableAdvancedStringTypes" value="true"/>
            <property name="enableIntegerRanges" value="true"/>
        </properties>
    </rule>

    <!-- Require nowdoc syntax instead of heredoc when possible -->
    <rule ref="SlevomatCodingStandard.PHP.RequireNowdoc"/>

    <!-- Forbid argument unpacking for functions specialized by PHP VM -->
    <rule ref="SlevomatCodingStandard.PHP.OptimizedFunctionsWithoutUnpacking"/>

    <!-- Forbid `list(...)` syntax -->
    <rule ref="SlevomatCodingStandard.PHP.ShortList"/>

    <!-- Forbid use of longhand cast operators -->
    <rule ref="SlevomatCodingStandard.PHP.TypeCast"/>

    <!-- Forbid useless parentheses -->
    <rule ref="SlevomatCodingStandard.PHP.UselessParentheses"/>

    <!-- Forbid useless semicolon `;` -->
    <rule ref="SlevomatCodingStandard.PHP.UselessSemicolon"/>

    <!-- Allow variable parsing inside strings -->
    <!-- <rule ref="SlevomatCodingStandard.Strings.DisallowVariableParsing"/> -->

    <!-- Require presence of declare(strict_types = 1) -->
    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
        <properties>
            <property
                name="linesCountBeforeDeclare"
                value="1"
            />
            <property
                name="spacesCountAroundEqualsSign"
                value="1"
            />
            <property
                name="linesCountAfterDeclare"
                value="1"
            />
        </properties>
    </rule>

    <!-- Disallows usage of array type hint syntax (eg. int[], bool[][]) in phpDocs in favour of generic type hint syntax (eg. array<int>, array<array<bool>>). -->
    <rule ref="SlevomatCodingStandard.TypeHints.DisallowArrayTypeHintSyntax"/>

    <rule ref="SlevomatCodingStandard.TypeHints.DNFTypeHintFormat">
        <properties>
            <property name="enable" value="true"/>
            <property name="withSpacesAroundOperators" value="yes"/>
            <property name="withSpacesInsideParentheses" value="yes"/>
            <property name="shortNullable" value="no"/>
            <property name="nullPosition" value="last"/>
        </properties>
    </rule>

    <!-- Require use of short versions of scalar types (i.e. int instead of integer) -->
    <rule ref="SlevomatCodingStandard.TypeHints.LongTypeHints"/>

    <!-- Require the `null` type hint to be in the last position of annotations -->
    <rule ref="SlevomatCodingStandard.TypeHints.NullTypeHintOnLastPosition"/>

    <!-- Require ? when default value is null -->
    <rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue"/>

    <!-- Require types to be written as natively if possible;
        require iterable types to specify phpDoc with their content;
        forbid useless/duplicated information in phpDoc -->
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHint">
        <properties>
            <property name="traversableTypeHints" type="array">
                <element value="Traversable"/>
                <element value="Iterator"/>
                <element value="IteratorAggregate"/>
                <element value="iterable"/>
            </property>
            <property name="enableObjectTypeHint" value="true"/>
            <property name="enableMixedTypeHint" value="true"/>
            <property name="enableUnionTypeHint" value="true"/>
            <property name="enableIntersectionTypeHint" value="true"/>
            <property name="enableStandaloneNullTrueFalseTypeHints" value="false"/>
        </properties>
    </rule>

    <!-- Require one space between typehint and variable, require no space between nullability sign and typehint -->
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing"/>

    <rule ref="SlevomatCodingStandard.TypeHints.PropertyTypeHint">
        <properties>
            <property name="traversableTypeHints" type="array">
                <element value="Traversable"/>
                <element value="Iterator"/>
                <element value="IteratorAggregate"/>
                <element value="iterable"/>
            </property>
            <property name="enableNativeTypeHint" value="true"/>
            <property name="enableMixedTypeHint" value="true"/>
            <property name="enableUnionTypeHint" value="true"/>
            <property name="enableIntersectionTypeHint" value="true"/>
            <property name="enableStandaloneNullTrueFalseTypeHints" value="false"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHint">
        <properties>
            <property name="traversableTypeHints" type="array">
                <element value="Traversable"/>
                <element value="Iterator"/>
                <element value="IteratorAggregate"/>
                <element value="iterable"/>
            </property>
            <property name="enableObjectTypeHint" value="true"/>
            <property name="enableStaticTypeHint" value="true"/>
            <property name="enableMixedTypeHint" value="true"/>
            <property name="enableUnionTypeHint" value="true"/>
            <property name="enableIntersectionTypeHint" value="true"/>
            <property name="enableNeverTypeHint" value="true"/>
            <property name="enableStandaloneNullTrueFalseTypeHints" value="false"/>
        </properties>
    </rule>

    <!-- Require space around colon in return types -->
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing">
        <properties>
            <property name="spacesCountBeforeColon" value="0"/>
        </properties>
    </rule>

    <!-- Forbid useless @var for constants -->
    <rule ref="SlevomatCodingStandard.TypeHints.UselessConstantTypeHint"/>

    <!-- Disallows use of super global variables. -->
    <rule ref="SlevomatCodingStandard.Variables.DisallowSuperGlobalVariable"/>

    <!-- Disallows use of variable variables -->
    <rule ref="SlevomatCodingStandard.Variables.DisallowVariableVariable"/>

    <!-- Forbid duplicated variables assignments -->
    <rule ref="SlevomatCodingStandard.Variables.DuplicateAssignmentToVariable"/>

    <!-- Looks for unused variables -->
    <rule ref="SlevomatCodingStandard.Variables.UnusedVariable">
        <properties>
            <property name="ignoreUnusedValuesWhenOnlyKeysAreUsedInForeach" value="false"/>
        </properties>
    </rule>

    <!-- Forbid useless variables -->
    <rule ref="SlevomatCodingStandard.Variables.UselessVariable"/>

    <!-- Checks duplicate spaces anywhere -->
    <rule ref="SlevomatCodingStandard.Whitespaces.DuplicateSpaces">
        <properties>
            <property name="ignoreSpacesBeforeAssignment" value="true"/> <!-- allow multiple spaces to align assignments -->
            <property name="ignoreSpacesInAnnotation" value="false"/>
            <property name="ignoreSpacesInComment" value="true"/> <!-- allow multiple spaces to align content of the comment -->
            <property name="ignoreSpacesInParameters" value="false"/>
            <property name="ignoreSpacesInMatch" value="false"/>
        </properties>
    </rule>

    <!-- Forbid spaces around square brackets -->
    <rule ref="Squiz.Arrays.ArrayBracketSpacing"/>

    <!-- Force array declaration structure -->
    <rule ref="Squiz.Arrays.ArrayDeclaration">
        <!-- Disable arrow alignment -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.DoubleArrowNotAligned"/>
        <!-- Uses indentation of only single space -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.KeyNotAligned"/>
        <!-- Allow multiple values on a single line -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.SingleLineNotAllowed"/>
        <!-- Disable alignment of braces -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned"/>
        <!-- Disable alignment of values with opening brace -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.ValueNotAligned"/>
        <!-- Checked by SlevomatCodingStandard.Arrays.TrailingArrayComma.MissingTrailingComma -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.NoCommaAfterLast"/>
        <exclude name="Squiz.Arrays.ArrayDeclaration.NoComma"/>
    </rule>

    <!-- Forbid class being in a file with different name -->
    <rule ref="Squiz.Classes.ClassFileName"/>

    <!-- Force `self::` for self-reference, force lower-case self, forbid spaces around `::` -->
    <rule ref="Squiz.Classes.SelfMemberReference"/>

    <!-- Force phpDoc alignment -->
    <rule ref="Squiz.Commenting.DocCommentAlignment">
        <!-- Allow extra spaces after star, i.e. for indented annotations -->
        <exclude name="Squiz.Commenting.DocCommentAlignment.SpaceAfterStar"/>
    </rule>

    <!-- Force rules for function phpDoc -->
    <rule ref="Squiz.Commenting.FunctionComment">
        <!-- Allow `@throws` without description -->
        <exclude name="Squiz.Commenting.FunctionComment.EmptyThrows"/>

        <!-- Does not work properly with PHP 7 / short-named types -->
        <exclude name="Squiz.Commenting.FunctionComment.IncorrectParamVarName"/>

        <!-- Does not support collections, i.e. `string[]` -->
        <exclude name="Squiz.Commenting.FunctionComment.IncorrectTypeHint"/>

        <!-- Forces incorrect types, Does not work properly with PHP 7 / short-named types -->
        <exclude name="Squiz.Commenting.FunctionComment.InvalidReturn"/>

        <!-- does not work with __clone() -->
        <!-- <exclude name="Squiz.Commenting.FunctionComment.InvalidNoReturn"/> -->

        <!-- Breaks with compound return types, i.e. `string|null` -->
        <!-- <exclude name="Squiz.Commenting.FunctionComment.InvalidReturnNotVoid"/> -->

        <!-- Breaks when all params are not documented -->
        <!-- <exclude name="Squiz.Commenting.FunctionComment.InvalidTypeHint"/> -->

        <!-- Do not require comments for `@param` -->
        <exclude name="Squiz.Commenting.FunctionComment.MissingParamComment"/>

        <exclude name="Squiz.Commenting.FunctionComment.MissingParamTag"/>

        <exclude name="Squiz.Commenting.FunctionComment.MissingReturn"/>

        <!-- Comments don't have to be sentences -->
        <exclude name="Squiz.Commenting.FunctionComment.ParamCommentFullStop"/>

        <!-- Comments don't have to be sentences -->
        <exclude name="Squiz.Commenting.FunctionComment.ParamCommentNotCapital"/>

        <!-- Breaks when not all params are documented -->
        <exclude name="Squiz.Commenting.FunctionComment.ParamNameNoMatch"/>

        <!-- Doesn't respect inheritance -->
        <exclude name="Squiz.Commenting.FunctionComment.ScalarTypeHintMissing"/>

        <!-- `@throws` lines can often be read as a sentence,
            i.e. `@throws RuntimeException if the file could not be written.` -->
        <exclude name="Squiz.Commenting.FunctionComment.ThrowsNotCapital"/>

        <!-- `@throws` lines can often be read as a sentence, but shall not end with an Dot -->
        <exclude name="Squiz.Commenting.FunctionComment.ThrowsNoFullStop"/>

        <!-- Doesn't work with self as typehint -->
        <exclude name="Squiz.Commenting.FunctionComment.TypeHintMissing"/>
    </rule>

    <!-- Forbid global functions -->
    <rule ref="Squiz.Functions.GlobalFunction"/>

    <!-- Force camelCase variables -->
    <rule ref="Squiz.NamingConventions.ValidVariableName">
        <exclude name="Squiz.NamingConventions.ValidVariableName.PrivateNoUnderscore"/>
    </rule>

    <!-- Forbid `AND` and `OR`, require `&&` and `||` -->
    <rule ref="Squiz.Operators.ValidLogicalOperators"/>

    <!-- Forbid `global` -->
    <rule ref="Squiz.PHP.GlobalKeyword"/>

    <!-- Forbid functions inside functions -->
    <rule ref="Squiz.PHP.InnerFunctions"/>

    <!-- Require PHP function calls in lowercase -->
    <rule ref="Squiz.PHP.LowercasePHPFunctions"/>

    <!-- Forbid dead code -->
    <rule ref="Squiz.PHP.NonExecutableCode"/>

    <!-- Forbid `$this` inside static function -->
    <rule ref="Squiz.Scope.StaticThisUsage"/>

    <!-- Force whitespace before and after concatenation -->
    <rule ref="Squiz.Strings.ConcatenationSpacing">
        <properties>
            <property name="spacing" value="1"/>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>

    <!-- Forbid strings in `"` unless necessary -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage"/>

    <!-- Forbid braces around string in `echo` -->
    <rule ref="Squiz.Strings.EchoedStrings"/>

    <!-- Forbid spaces in type casts -->
    <rule ref="Squiz.WhiteSpace.CastSpacing"/>

    <!-- Forbid blank line after function opening brace -->
    <rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace"/>

    <!-- Require 1 line before and after function, except at the top and bottom -->
    <rule ref="Squiz.WhiteSpace.FunctionSpacing">
        <properties>
            <property name="spacing" value="1"/>
            <property name="spacingBeforeFirst" value="0"/>
            <property name="spacingAfterLast" value="0"/>
        </properties>
    </rule>

    <!-- Require space around logical operators -->
    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>

    <!-- Forbid spaces around `->` operator -->
    <rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>

    <!-- Forbid spaces before semicolon `;` -->
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>

    <!-- Forbid superfluous whitespaces -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
        <properties>
            <!-- turned on by PSR-12 -> turning back off -->
            <property name="ignoreBlankLines" value="false"/>
        </properties>
    </rule>

    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
        <!-- turned off by PSR-12 -> turning back on -->
        <severity>5</severity>
    </rule>

    <!-- Force rules for function phpDoc -->
    <rule ref="Mimmi20CodingStandard.Commenting.FunctionCommentThrowTag"/>
</ruleset>
