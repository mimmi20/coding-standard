<?php

declare(strict_types = 1);

namespace Laminas\Db\ResultSet;

use Countable;
use Laminas\Db\ResultSet\Exception\InvalidArgumentException;
use Traversable;

/**
 * @template TKey
 * @template-covariant TValue
 * @template-extends Traversable<TKey, TValue>
 */
interface ResultSetInterface extends Traversable, Countable
{
    /**
     * Can be anything traversable|array
     *
     * @param iterable<int|string, mixed> $dataSource
     *
     * @return mixed
     *
     * @throws InvalidArgumentException
     *
     * @abstract
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint
     */
    public function initialize($dataSource);

    /**
     * Field terminology is more correct as information coming back
     * from the database might be a column, and/or the result of an
     * operation or intersection of some data
     *
     * @return mixed
     *
     * @throws void
     *
     * @abstract
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint
     */
    public function getFieldCount();
}
