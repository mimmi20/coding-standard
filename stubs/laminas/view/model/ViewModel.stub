<?php

declare(strict_types = 1);

namespace Laminas\View\Model;

use ArrayAccess;
use Laminas\View\Exception\InvalidArgumentException;
use ReturnTypeWillChange;
// phpcs:ignore
use Traversable;

final class ViewModel implements ModelInterface, ClearableModelInterface, RetrievableChildrenInterface
{
    /**
     * What variable a parent model should capture this model to
     */
    protected string $captureTo = 'content';

    /**
     * Child models
     *
     * @var list<ModelInterface>
     */
    protected array $children = [];

    /**
     * Renderer options
     *
     * @var array<string, mixed>
     */
    protected array $options = [];

    /**
     * Template to use when rendering this model
     */
    protected string $template = '';

    /**
     * Is this a standalone, or terminal, model?
     */
    protected bool $terminate = false;

    /**
     * View variables
     *
     * @var array<string, mixed>|ArrayAccess<string, mixed>
     * @psalm-var array<string, mixed>|(ArrayAccess&Traversable)<string, mixed>
     * @phpstan-var array<string, mixed>|(ArrayAccess&Traversable)<string, mixed>
     */
    protected array | ArrayAccess | Traversable $variables = [];

    /**
     * Is this append to child  with the same capture?
     */
    protected bool $append = false;

    /**
     * Constructor
     *
     * @param array<string, mixed>|Traversable<string, mixed>|ArrayAccess<string, mixed>|null $variables
     * @param array<string, mixed>|Traversable<string, mixed>|null                            $options
     *
     * @throws InvalidArgumentException
     */
    public function __construct(
        array | Traversable | ArrayAccess | null $variables = null,
        array | Traversable | null $options = null,
    );

    /**
     * Property overloading: set variable value
     *
     * @throws void
     */
    public function __set(string $name, mixed $value): void;

    /**
     * Property overloading: get variable value
     *
     * @throws void
     */
    public function __get(string $name): mixed;

    /**
     * Property overloading: do we have the requested variable value?
     *
     * @throws void
     */
    public function __isset(string $name): bool;

    /**
     * Property overloading: unset the requested variable
     *
     * @throws void
     */
    public function __unset(string $name): void;

    /**
     * Called after this view model is cloned.
     *
     * Clones $variables property so changes done to variables in the new
     * instance don't change the current one.
     *
     * @return void
     *
     * @throws void
     */
    public function __clone();

    /**
     * Set a single option
     *
     * @param string $name
     * @param mixed  $value
     *
     * @throws void
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint
     */
    public function setOption($name, $value): self;

    /**
     * Get a single option
     *
     * @param string     $name    The option to get.
     * @param mixed|null $default (optional) A default value if the option is not yet set.
     *
     * @throws void
     */
    public function getOption(string $name, mixed $default = null): mixed;

    /**
     * Set renderer options/hints en masse
     *
     * @param array<string, mixed>|Traversable<string, mixed> $options
     *
     * @throws InvalidArgumentException
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint
     */
    public function setOptions($options): self;

    /**
     * Get renderer options/hints
     *
     * @return @return array<string, mixed>|Traversable<string, mixed>
     *
     * @throws void
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint
     */
    public function getOptions();

    /**
     * Clear any existing renderer options/hints
     *
     * @throws void
     */
    public function clearOptions(): self;

    /**
     * Get a single view variable
     *
     * @param string     $name
     * @param mixed|null $default (optional) default value if the variable is not present.
     *
     * @throws void
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint
     */
    public function getVariable($name, $default = null): mixed;

    /**
     * Set view variable
     *
     * @param string $name
     * @param mixed  $value
     *
     * @throws void
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint
     */
    public function setVariable($name, $value): self;

    /**
     * Set view variables en masse
     *
     * Can be an array or a Traversable + ArrayAccess object.
     *
     * @param array<string, mixed>|ArrayAccess<string, mixed> $variables
     * @param bool                                            $overwrite Whether or not to overwrite the internal container with $variables
     * @psalm-param array<string, mixed>|(ArrayAccess&Traversable)<string, mixed> $variables
     * @phpstan-param array<string, mixed>|(ArrayAccess&Traversable)<string, mixed> $variables
     *
     * @throws InvalidArgumentException
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint
     */
    public function setVariables($variables, bool $overwrite = false): self;

    /**
     * Get view variables
     *
     * @return array<string, mixed>|ArrayAccess<string, mixed>
     * @psalm-return array<string, mixed>|(ArrayAccess&Traversable)<string, mixed>
     * @phpstan-return array<string, mixed>|(ArrayAccess&Traversable)<string, mixed>
     *
     * @throws void
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint
     */
    public function getVariables();

    /**
     * Clear all variables
     *
     * Resets the internal variable container to an empty container.
     *
     * @throws void
     */
    public function clearVariables(): self;

    /**
     * Set the template to be used by this model
     *
     * @param string $template
     *
     * @throws void
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint
     */
    public function setTemplate($template): self;

    /**
     * Get the template to be used by this model
     *
     * @return string
     *
     * @throws void
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint
     */
    public function getTemplate();

    /**
     * Add a child model
     *
     * @param string|null $captureTo Optional; if specified, the "capture to" value to set on the child
     * @param bool|null   $append    Optional; if specified, append to child  with the same capture
     *
     * @throws void
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint
     */
    public function addChild(ModelInterface $child, $captureTo = null, $append = null): self;

    /**
     * Return all children.
     *
     * Return specifies an array, but may be any iterable object.
     *
     * @return list<ModelInterface>
     *
     * @throws void
     */
    public function getChildren(): array;

    /**
     * Does the model have any children?
     *
     * @throws void
     */
    public function hasChildren(): bool;

    /**
     * Clears out all child models
     *
     * @throws void
     */
    public function clearChildren(): self;

    /**
     * Returns an array of Viewmodels with captureTo value $capture
     *
     * @param bool $recursive search recursive through children, default true
     *
     * @return list<ModelInterface>
     *
     * @throws void
     */
    public function getChildrenByCaptureTo(string $capture, bool $recursive = true): array;

    /**
     * Set the name of the variable to capture this model to, if it is a child model
     *
     * @param string $capture
     *
     * @throws void
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint
     */
    public function setCaptureTo($capture): self;

    /**
     * Get the name of the variable to which to capture this model
     *
     * @throws void
     */
    public function captureTo(): string;

    /**
     * Set flag indicating whether or not this is considered a terminal or standalone model
     *
     * @param bool $terminate
     *
     * @throws void
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint
     */
    public function setTerminal($terminate): self;

    /**
     * Is this considered a terminal or standalone model?
     *
     * @throws void
     */
    public function terminate(): bool;

    /**
     * Set flag indicating whether or not append to child  with the same capture
     *
     * @param bool $append
     *
     * @throws void
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint
     */
    public function setAppend($append): self;

    /**
     * Is this append to child  with the same capture?
     *
     * @throws void
     */
    public function isAppend(): bool;

    /**
     * Return count of children
     *
     * @throws void
     */
    #[ReturnTypeWillChange]
    public function count(): int;

    /**
     * Get iterator of children
     *
     * @return Traversable<int, ModelInterface>
     *
     * @throws void
     */
    #[ReturnTypeWillChange]
    public function getIterator(): Traversable;
}
