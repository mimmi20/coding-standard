<?php

declare(strict_types = 1);

namespace Laminas\View\Model;

use ArrayAccess;
use Countable;
use IteratorAggregate;
use Laminas\View\Exception\InvalidArgumentException;
use Traversable;

/**
 * Interface describing a view model.
 *
 * Extends "Countable"; count() should return the number of children attached
 * to the model.
 *
 * Extends "IteratorAggregate"; should allow iterating over children.
 *
 * @extends IteratorAggregate<int, ModelInterface>
 */
interface ModelInterface extends Countable, IteratorAggregate
{
    /**
     * Set renderer option/hint
     *
     * @param string $name
     * @param mixed  $value
     *
     * @throws void
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint
     */
    public function setOption($name, $value): self;

    /**
     * Set renderer options/hints en masse
     *
     * @param array<string, mixed>|Traversable<string, mixed> $options
     *
     * @throws InvalidArgumentException
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint
     */
    public function setOptions($options): self;

    /**
     * Get renderer options/hints
     *
     * @return array<string, mixed>|Traversable<string, mixed>
     *
     * @throws void
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint
     */
    public function getOptions();

    /**
     * Get a single view variable
     *
     * @param string     $name
     * @param mixed|null $default (optional) default value if the variable is not present.
     *
     * @throws void
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint
     */
    public function getVariable($name, $default = null): mixed;

    /**
     * Set view variable
     *
     * @param string $name
     * @param mixed  $value
     *
     * @throws void
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint
     */
    public function setVariable($name, $value): self;

    /**
     * Set view variables en masse
     *
     * @param array<string, mixed>|ArrayAccess<string, mixed> $variables
     * @psalm-param array<string, mixed>|(ArrayAccess&Traversable)<string, mixed> $variables
     * @phpstan-param array<string, mixed>|(ArrayAccess&Traversable)<string, mixed> $variables
     *
     * @throws InvalidArgumentException
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint
     */
    public function setVariables($variables): self;

    /**
     * Get view variables
     *
     * @return array<string, mixed>|ArrayAccess<string, mixed>
     * @psalm-return array<string, mixed>|(ArrayAccess&Traversable)<string, mixed>
     * @phpstan-return array<string, mixed>|(ArrayAccess&Traversable)<string, mixed>
     *
     * @throws void
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint
     */
    public function getVariables();

    /**
     * Set the template to be used by this model
     *
     * @param string $template
     *
     * @throws void
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint
     */
    public function setTemplate($template): self;

    /**
     * Get the template to be used by this model
     *
     * @return string
     *
     * @throws void
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint
     */
    public function getTemplate();

    /**
     * Add a child model
     *
     * @param string|null $captureTo Optional; if specified, the "capture to" value to set on the child
     * @param bool|null   $append    Optional; if specified, append to child  with the same capture
     *
     * @throws void
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint
     * @phpcs:disable SlevomatCodingStandard.Classes.RequireSelfReference.RequiredSelfReference
     */
    public function addChild(ModelInterface $child, $captureTo = null, $append = false): self;

    /**
     * Return all children.
     *
     * Return specifies an array, but may be any iterable object.
     *
     * @return list<ModelInterface>
     *
     * @throws void
     */
    public function getChildren(): array;

    /**
     * Does the model have any children?
     *
     * @throws void
     */
    public function hasChildren(): bool;

    /**
     * Set the name of the variable to capture this model to, if it is a child model
     *
     * @param string $capture
     *
     * @throws void
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint
     */
    public function setCaptureTo($capture): self;

    /**
     * Get the name of the variable to which to capture this model
     *
     * @throws void
     */
    public function captureTo(): string;

    /**
     * Set flag indicating whether or not this is considered a terminal or standalone model
     *
     * @param bool $terminate
     *
     * @throws void
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint
     */
    public function setTerminal($terminate): self;

    /**
     * Is this considered a terminal or standalone model?
     *
     * @throws void
     */
    public function terminate(): bool;

    /**
     * Set flag indicating whether or not append to child  with the same capture
     *
     * @param bool $append
     *
     * @throws void
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint
     */
    public function setAppend($append): self;

    /**
     * Is this append to child  with the same capture?
     *
     * @throws void
     */
    public function isAppend(): bool;
}
