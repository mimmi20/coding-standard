<?php

declare(strict_types = 1);

namespace Laminas\ServiceManager;

use Laminas\ServiceManager\Exception\ContainerModificationsNotAllowedException;
use Laminas\ServiceManager\Exception\InvalidServiceException;
use Psr\Container\ContainerInterface;

/**
 * Abstract plugin manager.
 *
 * Abstract PluginManagerInterface implementation providing:
 *
 * - creation context support. The constructor accepts the parent container
 *   instance, which is then used when creating instances.
 * - plugin validation. Implementations may define the `$instanceOf` property
 *   to indicate what class types constitute valid plugins, omitting the
 *   requirement to define the `validate()` method.
 *
 * The implementation extends `ServiceManager`, thus providing the same set
 * of capabilities as found in that implementation.
 *
 * @template InstanceType of object
 * @implements PluginManagerInterface<InstanceType>
 * @extends ServiceManager<InstanceType>
 *
 * @psalm-type AbstractFactoriesConfiguration = array<
 *      array-key,
 *      (class-string<Factory\AbstractFactoryInterface>|Factory\AbstractFactoryInterface)
 * >
 * @psalm-type DelegatorsConfiguration = array<
 *      string,
 *      array<
 *          array-key,
 *          (class-string<Factory\DelegatorFactoryInterface>|Factory\DelegatorFactoryInterface)
 *          |callable(ContainerInterface,string,callable():object,array<mixed>|null):object
 *      >
 * >
 * @psalm-type FactoriesConfiguration = array<
 *      string,
 *      (class-string<Factory\FactoryInterface>|Factory\FactoryInterface)
 *      |callable(ContainerInterface,?string,?array<mixed>|null):object
 * >
 * @psalm-type InitializersConfiguration = array<
 *      array-key,
 *      (class-string<Initializer\InitializerInterface>|Initializer\InitializerInterface)
 *      |callable(ContainerInterface,object):void
 * >
 * @psalm-type LazyServicesConfiguration = array{
 *      class_map?:array<string,class-string>,
 *      proxies_namespace?:non-empty-string,
 *      proxies_target_dir?:non-empty-string,
 *      write_proxy_files?:bool
 * }
 */
abstract class AbstractPluginManager extends ServiceManager implements PluginManagerInterface
{
    /**
     * Whether or not to auto-add a FQCN as an invokable if it exists.
     */
    protected bool $autoAddInvokableClass = true;

    /**
     * An object type that the created instance must be instanced of
     *
     * @var null|string
     * @psalm-var class-string<InstanceType>|null
     * @phpstan-var class-string<InstanceType>|null
     */
    protected $instanceOf = null;

    /**
     * Sets the provided $parentLocator as the creation context for all
     * factories; for $config, {@see \Laminas\ServiceManager\ServiceManager::configure()}
     * for details on its accepted structure.
     *
     * @param ConfigInterface<InstanceType>|ContainerInterface|null $configInstanceOrParentLocator
     * @param array $config
     * @phpstan-param array{abstract_factories?: AbstractFactoriesConfiguration, aliases?: array<string,string|class-string<InstanceType>>, delegators?: DelegatorsConfiguration, factories?: FactoriesConfiguration, initializers?: InitializersConfiguration, invokables?: array<string,string>, lazy_services?: LazyServicesConfiguration, services?: array<string|class-string<InstanceType>,InstanceType>, shared?:array<string|class-string<InstanceType>,bool>, shared_by_default?:bool} $config
     *
     * @throws InvalidServiceException
     */
    public function __construct(
        ConfigInterface | ContainerInterface | null $configInstanceOrParentLocator = null,
        array $config = [],
    );

    /**
     * Override configure() to validate service instances.
     *
     * @param  array $config
     * @phpstan-param array{abstract_factories?: AbstractFactoriesConfiguration, aliases?: array<string,string|class-string<InstanceType>>, delegators?: DelegatorsConfiguration, factories?: FactoriesConfiguration, initializers?: InitializersConfiguration, invokables?: array<string,string>, lazy_services?: LazyServicesConfiguration, services?: array<string|class-string<InstanceType>,InstanceType>, shared?:array<string|class-string<InstanceType>,bool>, shared_by_default?:bool} $config
     *
     * @return self<InstanceType>
     *
     * @throws InvalidServiceException If an instance passed in the `services` configuration is invalid for the plugin manager.
     * @throws ContainerModificationsNotAllowedException If the allow override flag has been toggled off, and a service instanceexists for a given service.
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint
     */
    public function configure(array $config);

    /**
     * Override setService for additional plugin validation.
     *
     * {@inheritDoc}
     *
     * @param string|class-string<InstanceType> $name
     * @param InstanceType                      $service
     *
     * @return void
     *
     * @throws InvalidServiceException
     */
    public function setService($name, $service);

    /**
     * @param class-string<InstanceType>|string $name    Service name of plugin to retrieve.
     * @param array<mixed>|null                 $options Options to use when creating the instance.
     *
     * @return mixed
     * @psalm-return ($name is class-string<InstanceType> ? InstanceType : mixed)
     * @phpstan-return ($name is class-string<InstanceType> ? InstanceType : mixed)
     *
     * @throws Exception\ServiceNotFoundException If the manager does not have a service definition for the instance, and the service is not auto-invokable.
     * @throws InvalidServiceException If the plugin created is invalid for the plugin context.
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint
     */
    public function get($name, array | null $options = null);

    /**
     * Implemented for backwards compatibility only.
     *
     * Returns the creation context.
     *
     * @deprecated since 3.0.0. The creation context should be passed during instantiation instead.
     *
     * @return void
     *
     * @throws void
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint
     */
    public function setServiceLocator(ContainerInterface $container);
}
