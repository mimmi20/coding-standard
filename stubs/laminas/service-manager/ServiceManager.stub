<?php

declare(strict_types = 1);

namespace Laminas\ServiceManager;

use Laminas\ServiceManager\Exception\ContainerModificationsNotAllowedException;
use Laminas\ServiceManager\Exception\InvalidArgumentException;
use Laminas\ServiceManager\Exception\ServiceNotCreatedException;
use Laminas\ServiceManager\Exception\ServiceNotFoundException;
use Psr\Container\ContainerExceptionInterface;
use Psr\Container\ContainerInterface;
use Psr\Container\NotFoundExceptionInterface;

/**
 * Service Manager.
 *
 * Default implementation of the ServiceLocatorInterface, providing capabilities
 * for object creation via:
 *
 * - factories
 * - abstract factories
 * - delegator factories
 * - lazy service factories (generated proxies)
 * - initializers (interface injection)
 *
 * It also provides the ability to inject specific service instances and to
 * define aliases.
 *
 * @see ConfigInterface
 *
 * @psalm-type AbstractFactoriesConfiguration = array<
 *      array-key,
 *      (class-string<Factory\AbstractFactoryInterface>|Factory\AbstractFactoryInterface)
 * >
 * @psalm-type DelegatorsConfiguration = array<
 *      string,
 *      array<
 *          array-key,
 *          (class-string<Factory\DelegatorFactoryInterface>|Factory\DelegatorFactoryInterface)
 *          |callable(ContainerInterface,string,callable():object,array<mixed>|null):object
 *      >
 * >
 * @psalm-type FactoriesConfiguration = array<
 *      string,
 *      (class-string<Factory\FactoryInterface>|Factory\FactoryInterface)
 *      |callable(ContainerInterface,?string,?array<mixed>|null):object
 * >
 * @psalm-type InitializersConfiguration = array<
 *      array-key,
 *      (class-string<Initializer\InitializerInterface>|Initializer\InitializerInterface)
 *      |callable(ContainerInterface,object):void
 * >
 * @psalm-type LazyServicesConfiguration = array{
 *      class_map?:array<string,class-string>,
 *      proxies_namespace?:non-empty-string,
 *      proxies_target_dir?:non-empty-string,
 *      write_proxy_files?:bool
 * }
 * @psalm-type ServiceManagerConfiguration = array{
 *     abstract_factories?: AbstractFactoriesConfiguration,
 *     aliases?: array<string,string>,
 *     delegators?: DelegatorsConfiguration,
 *     factories?: FactoriesConfiguration,
 *     initializers?: InitializersConfiguration,
 *     invokables?: array<string,string>,
 *     lazy_services?: LazyServicesConfiguration,
 *     services?: array<string,object|array>,
 *     shared?:array<string,bool>,
 *     shared_by_default?:bool,
 * }
 *
 * @template InstanceType of object
 * @implements ServiceLocatorInterface<InstanceType>
 *
 * @phpcs:disable SlevomatCodingStandard.Classes.RequireAbstractOrFinal.ClassNeitherAbstractNorFinal
 */
class ServiceManager implements ServiceLocatorInterface
{
    /**
     * @var array<Factory\AbstractFactoryInterface>
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.PropertyTypeHint.MissingNativeTypeHint
     */
    protected $abstractFactories = [];

    /**
     * A list of aliases
     *
     * Should map one alias to a service name, or another alias (aliases are recursively resolved)
     *
     * @var array<string|class-string<InstanceType>, class-string<InstanceType>>
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.PropertyTypeHint.MissingNativeTypeHint
     */
    protected $aliases = [];

    /**
     * Whether or not changes may be made to this instance.
     *
     * @var bool
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.PropertyTypeHint.MissingNativeTypeHint
     */
    protected $allowOverride = false;

    /**
     * @var ContainerInterface
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.PropertyTypeHint.MissingNativeTypeHint
     */
    protected $creationContext;

    /**
     * @var array<array<string|Factory\DelegatorFactoryInterface>>
     * @psalm-var DelegatorsConfiguration
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.PropertyTypeHint.MissingNativeTypeHint
     */
    protected $delegators = [];

    /**
     * A list of factories (either as string name or callable)
     *
     * @var array<string|callable>
     * @psalm-var FactoriesConfiguration
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.PropertyTypeHint.MissingNativeTypeHint
     */
    protected $factories = [];

    /**
     * @var array<Initializer\InitializerInterface|callable>
     * @psalm-var InitializersConfiguration
     * @phpstan-var array<array-key, (class-string<Initializer\InitializerInterface>|Initializer\InitializerInterface)|callable(ContainerInterface, object):void>
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.PropertyTypeHint.MissingNativeTypeHint
     */
    protected $initializers = [];

    /**
     * @var array<mixed>
     * @psalm-var LazyServicesConfiguration
     * @phpstan-var array{class_map?:array<string, class-string>, proxies_namespace?: non-empty-string, proxies_target_dir?: non-empty-string, write_proxy_files?: bool}
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.PropertyTypeHint.MissingNativeTypeHint
     */
    protected $lazyServices = [];

    /**
     * A list of already loaded services (this act as a local cache)
     *
     * @var array<string|class-string<InstanceType>,InstanceType>
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.PropertyTypeHint.MissingNativeTypeHint
     */
    protected $services = [];

    /**
     * Enable/disable shared instances by service name.
     *
     * Example configuration:
     *
     * 'shared' => [
     *     MyService::class => true, // will be shared, even if "sharedByDefault" is false
     *     MyOtherService::class => false // won't be shared, even if "sharedByDefault" is true
     * ]
     *
     * @var array<string, bool>
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.PropertyTypeHint.MissingNativeTypeHint
     */
    protected $shared = [];

    /**
     * Should the services be shared by default?
     *
     * @var bool
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.PropertyTypeHint.MissingNativeTypeHint
     */
    protected $sharedByDefault = true;

    /**
     * Service manager was already configured?
     *
     * @var bool
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.PropertyTypeHint.MissingNativeTypeHint
     */
    protected $configured = false;

    /**
     * Cached abstract factories from string.
     *
     * @var array<string, Factory\AbstractFactoryInterface>
     */
    private array $cachedAbstractFactories = [];

    /**
     * See {@see \Laminas\ServiceManager\ServiceManager::configure()} for details
     * on what $config accepts.
     *
     * @phpstan-param array{abstract_factories?: AbstractFactoriesConfiguration, aliases?: array<string,string|class-string<InstanceType>>, delegators?: DelegatorsConfiguration, factories?: FactoriesConfiguration, initializers?: InitializersConfiguration, invokables?: array<string,string>, lazy_services?: LazyServicesConfiguration, services?: array<string|class-string<InstanceType>,InstanceType>, shared?:array<string|class-string<InstanceType>,bool>, shared_by_default?:bool} $config
     *
     * @throws ContainerModificationsNotAllowedException
     */
    public function __construct(array $config = []);

    /**
     * Implemented for backwards compatibility with previous plugin managers only.
     *
     * Returns the creation context.
     *
     * @deprecated since 3.0.0. Factories using 3.0 should use the container
     *     instance passed to the factory instead.
     *
     * @return ContainerInterface
     *
     * @throws void
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint
     */
    public function getServiceLocator();

    /**
     * @param string $name Identifier of the entry to look for.
     * @psalm-param string|class-string<T> $name
     * @phpstan-param string|class-string<T> $name
     *
     * @return mixed Entry.
     * @psalm-return ($id is class-string<T> ? T : mixed)
     * @phpstan-return ($id is class-string<T> ? T : mixed)
     *
     * @throws NotFoundExceptionInterface  No entry was found for **this** identifier.
     * @throws ContainerExceptionInterface Error while retrieving the entry.
     *
     * @template T of object
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint
     */
    public function get($name);

    /**
     * @param string                    $name    Identifier of the entry to build.
     * @param array<string, mixed>|null $options
     * @psalm-param string|class-string<T> $name
     * @phpstan-param string|class-string<T> $name
     *
     * @return mixed Entry.
     * @psalm-return ($id is class-string<T> ? T : mixed)
     * @phpstan-return ($id is class-string<T> ? T : mixed)
     *
     * @throws ServiceNotFoundException If unable to resolve the service.
     * @throws ServiceNotCreatedException If an exception is raised when creating a service.
     * @throws ContainerExceptionInterface If any other error occurs.
     *
     * @template T of object
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint
     */
    public function build($name, array | null $options = null);

    /**
     * {@inheritDoc}
     *
     * @param string|class-string<object> $name
     *
     * @return bool
     *
     * @throws void
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint
     */
    public function has($name);

    /**
     * Indicate whether or not the instance is immutable.
     *
     * @param bool $flag
     *
     * @return void
     *
     * @throws void
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint
     */
    public function setAllowOverride($flag);

    /**
     * Retrieve the flag indicating immutability status.
     *
     * @return bool
     *
     * @throws void
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint
     */
    public function getAllowOverride();

    /**
     * @phpstan-param array{abstract_factories?: AbstractFactoriesConfiguration, aliases?: array<string,string|class-string<InstanceType>>, delegators?: DelegatorsConfiguration, factories?: FactoriesConfiguration, initializers?: InitializersConfiguration, invokables?: array<string,string>, lazy_services?: LazyServicesConfiguration, services?: array<string|class-string<InstanceType>,InstanceType>, shared?:array<string|class-string<InstanceType>,bool>, shared_by_default?:bool} $config
     *
     * @return self<InstanceType>
     *
     * @throws ContainerModificationsNotAllowedException If the allow
     *     override flag has been toggled off, and a service instance
     *     exists for a given service.
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint
     */
    public function configure(array $config);

    /**
     * Add an alias.
     *
     * @param string $alias
     * @param string $target
     *
     * @return void
     *
     * @throws ContainerModificationsNotAllowedException If $alias already exists as a service and overrides are disallowed.
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint
     */
    public function setAlias($alias, $target);

    /**
     * Add an invokable class mapping.
     *
     * @param string      $name  Service name
     * @param string|null $class Class to which to map; if omitted, $name is assumed.
     *
     * @return void
     *
     * @throws ContainerModificationsNotAllowedException If $name already exists as a service and overrides are disallowed.
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint
     */
    public function setInvokableClass($name, $class = null);

    /**
     * Specify a factory for a given service name.
     *
     * @param string                                   $name    Service name
     * @param string|callable|Factory\FactoryInterface $factory Factory to which to map.
     * @psalm-param class-string<Factory\FactoryInterface>|callable(ContainerInterface,string,array<mixed>|null):object|Factory\FactoryInterface $factory
     *
     * @return void
     *
     * @throws ContainerModificationsNotAllowedException If $name already exists as a service and overrides are disallowed.
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint
     */
    public function setFactory($name, $factory);

    /**
     * Create a lazy service mapping to a class.
     *
     * @param string      $name  Service name to map
     * @param string|null $class Class to which to map; if not provided, $name will be used for the mapping.
     *
     * @return void
     *
     * @throws ContainerModificationsNotAllowedException
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint
     */
    public function mapLazyService($name, $class = null);

    /**
     * Add an abstract factory for resolving services.
     *
     * @param string|Factory\AbstractFactoryInterface $factory Abstract factory instance or class name.
     * @psalm-param class-string<Factory\AbstractFactoryInterface>|Factory\AbstractFactoryInterface $factory
     *
     * @return void
     *
     * @throws InvalidArgumentException
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint
     */
    public function addAbstractFactory($factory);

    /**
     * Add a delegator for a given service.
     *
     * @param string                                            $name    Service name
     * @param string|callable|Factory\DelegatorFactoryInterface $factory Delegator factory to assign.
     * @psalm-param class-string<Factory\DelegatorFactoryInterface>|callable(ContainerInterface,string,callable,array<mixed>|null) $factory
     *
     * @return void
     *
     * @throws ContainerModificationsNotAllowedException
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint
     */
    public function addDelegator($name, $factory);

    /**
     * Add an initializer.
     *
     * @param string|callable|Initializer\InitializerInterface $initializer
     * @psalm-param class-string<Initializer\InitializerInterface>
     *     |callable(ContainerInterface,mixed):void
     *     |Initializer\InitializerInterface $initializer
     *
     * @return void
     *
     * @throws ContainerModificationsNotAllowedException
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint
     */
    public function addInitializer($initializer);

    /**
     * Map a service.
     *
     * @param string|class-string<InstanceType> $name    Service name
     * @param InstanceType                      $service
     *
     * @return void
     *
     * @throws ContainerModificationsNotAllowedException If $name already exists as a service and overrides are disallowed.
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint
     */
    public function setService($name, $service);

    /**
     * Add a service sharing rule.
     *
     * @param string $name Service name
     * @param bool   $flag Whether or not the service should be shared.
     *
     * @return void
     *
     * @throws ContainerModificationsNotAllowedException If $name already exists as a service and overrides are disallowed.
     *
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint
     * @phpcsSuppress SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint
     */
    public function setShared($name, $flag);
}
